// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.activity.forgotpassword.di;

import com.reliance.yeticarpet.activity.forgotpassword.ForgotPasswordActivity;
import com.reliance.yeticarpet.activity.forgotpassword.ForgotPasswordActivity_MembersInjector;
import com.reliance.yeticarpet.activity.forgotpassword.mvp.ForgotPasswordModel;
import com.reliance.yeticarpet.activity.forgotpassword.mvp.ForgotPasswordPresenter;
import com.reliance.yeticarpet.activity.forgotpassword.mvp.ForgotPasswordView;
import com.reliance.yeticarpet.app.AppComponent;
import com.reliance.yeticarpet.dialog.LoginErrorDialog;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerForgotPasswordComponent implements ForgotPasswordComponent {
  private final ForgotPasswordModule forgotPasswordModule;

  private final AppComponent appComponent;

  private Provider<String> getErrorMessageProvider;

  private Provider<LoginErrorDialog> getLoginErrorDialogProvider;

  private Provider<ForgotPasswordView> getForgotPasswordViewProvider;

  private DaggerForgotPasswordComponent(ForgotPasswordModule forgotPasswordModuleParam,
      AppComponent appComponentParam) {
    this.forgotPasswordModule = forgotPasswordModuleParam;
    this.appComponent = appComponentParam;
    initialize(forgotPasswordModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private ForgotPasswordModel forgotPasswordModel() {
    return ForgotPasswordModule_GetForgotPasswordModelFactory.getForgotPasswordModel(forgotPasswordModule, Preconditions.checkNotNullFromComponent(appComponent.webservice()));
  }

  private ForgotPasswordPresenter forgotPasswordPresenter() {
    return ForgotPasswordModule_GetForgotPasswordPresenterFactory.getForgotPasswordPresenter(forgotPasswordModule, forgotPasswordModel(), getForgotPasswordViewProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ForgotPasswordModule forgotPasswordModuleParam,
      final AppComponent appComponentParam) {
    this.getErrorMessageProvider = ForgotPasswordModule_GetErrorMessageFactory.create(forgotPasswordModuleParam);
    this.getLoginErrorDialogProvider = ForgotPasswordModule_GetLoginErrorDialogFactory.create(forgotPasswordModuleParam, getErrorMessageProvider);
    this.getForgotPasswordViewProvider = DoubleCheck.provider(ForgotPasswordModule_GetForgotPasswordViewFactory.create(forgotPasswordModuleParam, getLoginErrorDialogProvider));
  }

  @Override
  public void inject(ForgotPasswordActivity forgotPasswordActivity) {
    injectForgotPasswordActivity(forgotPasswordActivity);
  }

  private ForgotPasswordActivity injectForgotPasswordActivity(ForgotPasswordActivity instance) {
    ForgotPasswordActivity_MembersInjector.injectForgotPasswordView(instance, getForgotPasswordViewProvider.get());
    ForgotPasswordActivity_MembersInjector.injectForgotPasswordPresenter(instance, forgotPasswordPresenter());
    return instance;
  }

  public static final class Builder {
    private ForgotPasswordModule forgotPasswordModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder forgotPasswordModule(ForgotPasswordModule forgotPasswordModule) {
      this.forgotPasswordModule = Preconditions.checkNotNull(forgotPasswordModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public ForgotPasswordComponent build() {
      Preconditions.checkBuilderRequirement(forgotPasswordModule, ForgotPasswordModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerForgotPasswordComponent(forgotPasswordModule, appComponent);
    }
  }
}
