// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.activity.retailer.distributorlist.di;

import com.reliance.yeticarpet.activity.retailer.distributorlist.DistributorListActivity;
import com.reliance.yeticarpet.activity.retailer.distributorlist.DistributorListActivity_MembersInjector;
import com.reliance.yeticarpet.activity.retailer.distributorlist.adapter.DistributorListAdapter;
import com.reliance.yeticarpet.activity.retailer.distributorlist.mvp.DistributorListModel;
import com.reliance.yeticarpet.activity.retailer.distributorlist.mvp.DistributorListPresenter;
import com.reliance.yeticarpet.activity.retailer.distributorlist.mvp.DistributorListView;
import com.reliance.yeticarpet.app.AppComponent;
import com.reliance.yeticarpet.dialog.CredentialsErrorDialog;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerDistributorListComponent implements DistributorListComponent {
  private final DistributorListModule distributorListModule;

  private final AppComponent appComponent;

  private Provider<String> getErrorMessageProvider;

  private Provider<CredentialsErrorDialog> getCredentialsErrorDialogProvider;

  private Provider<DistributorListAdapter> getRetailerDashboardAdapterProvider;

  private Provider<DistributorListView> getMonthlyTrackerViewProvider;

  private DaggerDistributorListComponent(DistributorListModule distributorListModuleParam,
      AppComponent appComponentParam) {
    this.distributorListModule = distributorListModuleParam;
    this.appComponent = appComponentParam;
    initialize(distributorListModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private DistributorListModel distributorListModel() {
    return DistributorListModule_GetMonthlyTrackerModelFactory.getMonthlyTrackerModel(distributorListModule, Preconditions.checkNotNullFromComponent(appComponent.webservice()));
  }

  private DistributorListPresenter distributorListPresenter() {
    return DistributorListModule_GetDistributorListPresenterFactory.getDistributorListPresenter(distributorListModule, distributorListModel(), getMonthlyTrackerViewProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final DistributorListModule distributorListModuleParam,
      final AppComponent appComponentParam) {
    this.getErrorMessageProvider = DistributorListModule_GetErrorMessageFactory.create(distributorListModuleParam);
    this.getCredentialsErrorDialogProvider = DistributorListModule_GetCredentialsErrorDialogFactory.create(distributorListModuleParam, getErrorMessageProvider);
    this.getRetailerDashboardAdapterProvider = DistributorListModule_GetRetailerDashboardAdapterFactory.create(distributorListModuleParam);
    this.getMonthlyTrackerViewProvider = DoubleCheck.provider(DistributorListModule_GetMonthlyTrackerViewFactory.create(distributorListModuleParam, getCredentialsErrorDialogProvider, getRetailerDashboardAdapterProvider));
  }

  @Override
  public void inject(DistributorListActivity distributorListActivity) {
    injectDistributorListActivity(distributorListActivity);
  }

  private DistributorListActivity injectDistributorListActivity(DistributorListActivity instance) {
    DistributorListActivity_MembersInjector.injectDistributorListView(instance, getMonthlyTrackerViewProvider.get());
    DistributorListActivity_MembersInjector.injectDistributorListPresenter(instance, distributorListPresenter());
    return instance;
  }

  public static final class Builder {
    private DistributorListModule distributorListModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder distributorListModule(DistributorListModule distributorListModule) {
      this.distributorListModule = Preconditions.checkNotNull(distributorListModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public DistributorListComponent build() {
      Preconditions.checkBuilderRequirement(distributorListModule, DistributorListModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerDistributorListComponent(distributorListModule, appComponent);
    }
  }
}
