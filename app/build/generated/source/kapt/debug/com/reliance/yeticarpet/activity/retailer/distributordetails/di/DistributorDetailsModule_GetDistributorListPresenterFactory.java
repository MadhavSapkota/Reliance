// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.activity.retailer.distributordetails.di;

import com.reliance.yeticarpet.activity.retailer.distributordetails.mvp.DistributorDetailsModel;
import com.reliance.yeticarpet.activity.retailer.distributordetails.mvp.DistributorDetailsPresenter;
import com.reliance.yeticarpet.activity.retailer.distributordetails.mvp.DistributorDetailsView;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DistributorDetailsModule_GetDistributorListPresenterFactory implements Factory<DistributorDetailsPresenter> {
  private final DistributorDetailsModule module;

  private final Provider<DistributorDetailsModel> distributorDetailsModelProvider;

  private final Provider<DistributorDetailsView> distributorDetailsViewProvider;

  public DistributorDetailsModule_GetDistributorListPresenterFactory(
      DistributorDetailsModule module,
      Provider<DistributorDetailsModel> distributorDetailsModelProvider,
      Provider<DistributorDetailsView> distributorDetailsViewProvider) {
    this.module = module;
    this.distributorDetailsModelProvider = distributorDetailsModelProvider;
    this.distributorDetailsViewProvider = distributorDetailsViewProvider;
  }

  @Override
  public DistributorDetailsPresenter get() {
    return getDistributorListPresenter(module, distributorDetailsModelProvider.get(), distributorDetailsViewProvider.get());
  }

  public static DistributorDetailsModule_GetDistributorListPresenterFactory create(
      DistributorDetailsModule module,
      Provider<DistributorDetailsModel> distributorDetailsModelProvider,
      Provider<DistributorDetailsView> distributorDetailsViewProvider) {
    return new DistributorDetailsModule_GetDistributorListPresenterFactory(module, distributorDetailsModelProvider, distributorDetailsViewProvider);
  }

  public static DistributorDetailsPresenter getDistributorListPresenter(
      DistributorDetailsModule instance, DistributorDetailsModel distributorDetailsModel,
      DistributorDetailsView distributorDetailsView) {
    return Preconditions.checkNotNullFromProvides(instance.getDistributorListPresenter(distributorDetailsModel, distributorDetailsView));
  }
}
