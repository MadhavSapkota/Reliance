// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.activity.login.di;

import com.reliance.yeticarpet.activity.login.mvp.LoginModel;
import com.reliance.yeticarpet.activity.login.mvp.LoginPresenter;
import com.reliance.yeticarpet.activity.login.mvp.LoginView;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginModule_GetLoginPresenterFactory implements Factory<LoginPresenter> {
  private final LoginModule module;

  private final Provider<LoginModel> loginModelProvider;

  private final Provider<LoginView> loginViewProvider;

  public LoginModule_GetLoginPresenterFactory(LoginModule module,
      Provider<LoginModel> loginModelProvider, Provider<LoginView> loginViewProvider) {
    this.module = module;
    this.loginModelProvider = loginModelProvider;
    this.loginViewProvider = loginViewProvider;
  }

  @Override
  public LoginPresenter get() {
    return getLoginPresenter(module, loginModelProvider.get(), loginViewProvider.get());
  }

  public static LoginModule_GetLoginPresenterFactory create(LoginModule module,
      Provider<LoginModel> loginModelProvider, Provider<LoginView> loginViewProvider) {
    return new LoginModule_GetLoginPresenterFactory(module, loginModelProvider, loginViewProvider);
  }

  public static LoginPresenter getLoginPresenter(LoginModule instance, LoginModel loginModel,
      LoginView loginView) {
    return Preconditions.checkNotNullFromProvides(instance.getLoginPresenter(loginModel, loginView));
  }
}
