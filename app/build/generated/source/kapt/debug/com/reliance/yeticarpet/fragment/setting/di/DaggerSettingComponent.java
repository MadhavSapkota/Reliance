// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.fragment.setting.di;

import com.reliance.yeticarpet.app.AppComponent;
import com.reliance.yeticarpet.dialog.CredentialsErrorDialog;
import com.reliance.yeticarpet.fragment.setting.SettingFragment;
import com.reliance.yeticarpet.fragment.setting.SettingFragment_MembersInjector;
import com.reliance.yeticarpet.fragment.setting.mvp.SettingModel;
import com.reliance.yeticarpet.fragment.setting.mvp.SettingPresenter;
import com.reliance.yeticarpet.fragment.setting.mvp.SettingView;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerSettingComponent implements SettingComponent {
  private final SettingModule settingModule;

  private final AppComponent appComponent;

  private Provider<String> getErrorMessageProvider;

  private Provider<CredentialsErrorDialog> getCredentialErrorDialogProvider;

  private Provider<SettingView> getSettingViewProvider;

  private DaggerSettingComponent(SettingModule settingModuleParam, AppComponent appComponentParam) {
    this.settingModule = settingModuleParam;
    this.appComponent = appComponentParam;
    initialize(settingModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private SettingModel settingModel() {
    return SettingModule_GetSettingModelFactory.getSettingModel(settingModule, Preconditions.checkNotNullFromComponent(appComponent.webservice()));
  }

  private SettingPresenter settingPresenter() {
    return SettingModule_GetSettingPresenterFactory.getSettingPresenter(settingModule, getSettingViewProvider.get(), settingModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final SettingModule settingModuleParam,
      final AppComponent appComponentParam) {
    this.getErrorMessageProvider = SettingModule_GetErrorMessageFactory.create(settingModuleParam);
    this.getCredentialErrorDialogProvider = SettingModule_GetCredentialErrorDialogFactory.create(settingModuleParam, getErrorMessageProvider);
    this.getSettingViewProvider = DoubleCheck.provider(SettingModule_GetSettingViewFactory.create(settingModuleParam, getCredentialErrorDialogProvider));
  }

  @Override
  public void inject(SettingFragment settingFragment) {
    injectSettingFragment(settingFragment);
  }

  private SettingFragment injectSettingFragment(SettingFragment instance) {
    SettingFragment_MembersInjector.injectSettingView(instance, getSettingViewProvider.get());
    SettingFragment_MembersInjector.injectSettingPresenter(instance, settingPresenter());
    return instance;
  }

  public static final class Builder {
    private SettingModule settingModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder settingModule(SettingModule settingModule) {
      this.settingModule = Preconditions.checkNotNull(settingModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public SettingComponent build() {
      Preconditions.checkBuilderRequirement(settingModule, SettingModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerSettingComponent(settingModule, appComponent);
    }
  }
}
