// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.activity.distributor.retailerdetails.di;

import com.reliance.yeticarpet.activity.distributor.retailerdetails.PartyListDetailsActivity;
import com.reliance.yeticarpet.activity.distributor.retailerdetails.PartyListDetailsActivity_MembersInjector;
import com.reliance.yeticarpet.activity.distributor.retailerdetails.adapter.PartyListDetailsAdapter;
import com.reliance.yeticarpet.activity.distributor.retailerdetails.mvp.PartyListDetailsModel;
import com.reliance.yeticarpet.activity.distributor.retailerdetails.mvp.PartyListDetailsPresenter;
import com.reliance.yeticarpet.activity.distributor.retailerdetails.mvp.PartyListDetailsView;
import com.reliance.yeticarpet.app.AppComponent;
import com.reliance.yeticarpet.dialog.CredentialsErrorDialog;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerPartyListDetailsComponent implements PartyListDetailsComponent {
  private final PartyListDetailsModule partyListDetailsModule;

  private final AppComponent appComponent;

  private Provider<String> getErrorMessageProvider;

  private Provider<CredentialsErrorDialog> getCredentialsErrorDialogProvider;

  private Provider<PartyListDetailsAdapter> getPartyListDetailsAdapterProvider;

  private Provider<PartyListDetailsView> getPartyListDetailsTrackerViewProvider;

  private DaggerPartyListDetailsComponent(PartyListDetailsModule partyListDetailsModuleParam,
      AppComponent appComponentParam) {
    this.partyListDetailsModule = partyListDetailsModuleParam;
    this.appComponent = appComponentParam;
    initialize(partyListDetailsModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private PartyListDetailsModel partyListDetailsModel() {
    return PartyListDetailsModule_GetPartyListDetailsModelFactory.getPartyListDetailsModel(partyListDetailsModule, Preconditions.checkNotNullFromComponent(appComponent.webservice()));
  }

  private PartyListDetailsPresenter partyListDetailsPresenter() {
    return PartyListDetailsModule_GetPartyListDetailsPresenterFactory.getPartyListDetailsPresenter(partyListDetailsModule, partyListDetailsModel(), getPartyListDetailsTrackerViewProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final PartyListDetailsModule partyListDetailsModuleParam,
      final AppComponent appComponentParam) {
    this.getErrorMessageProvider = PartyListDetailsModule_GetErrorMessageFactory.create(partyListDetailsModuleParam);
    this.getCredentialsErrorDialogProvider = PartyListDetailsModule_GetCredentialsErrorDialogFactory.create(partyListDetailsModuleParam, getErrorMessageProvider);
    this.getPartyListDetailsAdapterProvider = PartyListDetailsModule_GetPartyListDetailsAdapterFactory.create(partyListDetailsModuleParam);
    this.getPartyListDetailsTrackerViewProvider = DoubleCheck.provider(PartyListDetailsModule_GetPartyListDetailsTrackerViewFactory.create(partyListDetailsModuleParam, getCredentialsErrorDialogProvider, getPartyListDetailsAdapterProvider));
  }

  @Override
  public void inject(PartyListDetailsActivity partyListDetailsActivity) {
    injectPartyListDetailsActivity(partyListDetailsActivity);
  }

  private PartyListDetailsActivity injectPartyListDetailsActivity(
      PartyListDetailsActivity instance) {
    PartyListDetailsActivity_MembersInjector.injectPartyListDetailsView(instance, getPartyListDetailsTrackerViewProvider.get());
    PartyListDetailsActivity_MembersInjector.injectPartyListDetailsPresenter(instance, partyListDetailsPresenter());
    return instance;
  }

  public static final class Builder {
    private PartyListDetailsModule partyListDetailsModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder partyListDetailsModule(PartyListDetailsModule partyListDetailsModule) {
      this.partyListDetailsModule = Preconditions.checkNotNull(partyListDetailsModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public PartyListDetailsComponent build() {
      Preconditions.checkBuilderRequirement(partyListDetailsModule, PartyListDetailsModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerPartyListDetailsComponent(partyListDetailsModule, appComponent);
    }
  }
}
