// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.fragment.distributor.dashboard.di;

import com.reliance.yeticarpet.app.AppComponent;
import com.reliance.yeticarpet.dialog.CredentialsErrorDialog;
import com.reliance.yeticarpet.dialog.FiscalYearDialog;
import com.reliance.yeticarpet.fragment.distributor.dashboard.DistributorDashboardFragment;
import com.reliance.yeticarpet.fragment.distributor.dashboard.DistributorDashboardFragment_MembersInjector;
import com.reliance.yeticarpet.fragment.distributor.dashboard.adapter.MonthListAdapter;
import com.reliance.yeticarpet.fragment.distributor.dashboard.adapter.MonthlySalesItemsAdapter;
import com.reliance.yeticarpet.fragment.distributor.dashboard.adapter.RetailerListAdapter;
import com.reliance.yeticarpet.fragment.distributor.dashboard.mvp.DistributorDashboardModel;
import com.reliance.yeticarpet.fragment.distributor.dashboard.mvp.DistributorDashboardPresenter;
import com.reliance.yeticarpet.fragment.distributor.dashboard.mvp.DistributorDashboardView;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerDistributorDashboardFragmentComponent implements DistributorDashboardFragmentComponent {
  private final DistributorDashboardFragmentModule distributorDashboardFragmentModule;

  private final AppComponent appComponent;

  private Provider<String> getErrorMessageProvider;

  private Provider<CredentialsErrorDialog> getCredentialErrorDialogProvider;

  private Provider<RetailerListAdapter> getDistributorDashboardAdapterProvider;

  private Provider<MonthlySalesItemsAdapter> getMonthlySalesItemAdapterProvider;

  private Provider<MonthListAdapter> getMonthListAdapterProvider;

  private Provider<FiscalYearDialog> getFiscalYearDialogProvider;

  private Provider<DistributorDashboardView> getDistributorDashboardViewProvider;

  private DaggerDistributorDashboardFragmentComponent(
      DistributorDashboardFragmentModule distributorDashboardFragmentModuleParam,
      AppComponent appComponentParam) {
    this.distributorDashboardFragmentModule = distributorDashboardFragmentModuleParam;
    this.appComponent = appComponentParam;
    initialize(distributorDashboardFragmentModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private DistributorDashboardModel distributorDashboardModel() {
    return DistributorDashboardFragmentModule_GetDistributorDashboardModelFactory.getDistributorDashboardModel(distributorDashboardFragmentModule, Preconditions.checkNotNullFromComponent(appComponent.webservice()));
  }

  private DistributorDashboardPresenter distributorDashboardPresenter() {
    return DistributorDashboardFragmentModule_GetDistributorDashboardPresenterFactory.getDistributorDashboardPresenter(distributorDashboardFragmentModule, getDistributorDashboardViewProvider.get(), distributorDashboardModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(
      final DistributorDashboardFragmentModule distributorDashboardFragmentModuleParam,
      final AppComponent appComponentParam) {
    this.getErrorMessageProvider = DistributorDashboardFragmentModule_GetErrorMessageFactory.create(distributorDashboardFragmentModuleParam);
    this.getCredentialErrorDialogProvider = DistributorDashboardFragmentModule_GetCredentialErrorDialogFactory.create(distributorDashboardFragmentModuleParam, getErrorMessageProvider);
    this.getDistributorDashboardAdapterProvider = DistributorDashboardFragmentModule_GetDistributorDashboardAdapterFactory.create(distributorDashboardFragmentModuleParam);
    this.getMonthlySalesItemAdapterProvider = DistributorDashboardFragmentModule_GetMonthlySalesItemAdapterFactory.create(distributorDashboardFragmentModuleParam);
    this.getMonthListAdapterProvider = DistributorDashboardFragmentModule_GetMonthListAdapterFactory.create(distributorDashboardFragmentModuleParam);
    this.getFiscalYearDialogProvider = DistributorDashboardFragmentModule_GetFiscalYearDialogFactory.create(distributorDashboardFragmentModuleParam);
    this.getDistributorDashboardViewProvider = DoubleCheck.provider(DistributorDashboardFragmentModule_GetDistributorDashboardViewFactory.create(distributorDashboardFragmentModuleParam, getCredentialErrorDialogProvider, getDistributorDashboardAdapterProvider, getMonthlySalesItemAdapterProvider, getMonthListAdapterProvider, getFiscalYearDialogProvider));
  }

  @Override
  public void inject(DistributorDashboardFragment distributorDashboardFragment) {
    injectDistributorDashboardFragment(distributorDashboardFragment);
  }

  private DistributorDashboardFragment injectDistributorDashboardFragment(
      DistributorDashboardFragment instance) {
    DistributorDashboardFragment_MembersInjector.injectDashboardView(instance, getDistributorDashboardViewProvider.get());
    DistributorDashboardFragment_MembersInjector.injectDashboardPresenter(instance, distributorDashboardPresenter());
    return instance;
  }

  public static final class Builder {
    private DistributorDashboardFragmentModule distributorDashboardFragmentModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder distributorDashboardFragmentModule(
        DistributorDashboardFragmentModule distributorDashboardFragmentModule) {
      this.distributorDashboardFragmentModule = Preconditions.checkNotNull(distributorDashboardFragmentModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public DistributorDashboardFragmentComponent build() {
      Preconditions.checkBuilderRequirement(distributorDashboardFragmentModule, DistributorDashboardFragmentModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerDistributorDashboardFragmentComponent(distributorDashboardFragmentModule, appComponent);
    }
  }
}
