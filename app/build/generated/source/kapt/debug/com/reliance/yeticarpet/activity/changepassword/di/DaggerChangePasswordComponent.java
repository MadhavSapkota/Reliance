// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.activity.changepassword.di;

import com.reliance.yeticarpet.activity.changepassword.ChangePasswordActivity;
import com.reliance.yeticarpet.activity.changepassword.ChangePasswordActivity_MembersInjector;
import com.reliance.yeticarpet.activity.changepassword.mvp.ChangePasswordModel;
import com.reliance.yeticarpet.activity.changepassword.mvp.ChangePasswordPresenter;
import com.reliance.yeticarpet.activity.changepassword.mvp.ChangePasswordView;
import com.reliance.yeticarpet.app.AppComponent;
import com.reliance.yeticarpet.dialog.LoginErrorDialog;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerChangePasswordComponent implements ChangePasswordComponent {
  private final ChangePasswordModule changePasswordModule;

  private final AppComponent appComponent;

  private Provider<String> getErrorMessageProvider;

  private Provider<LoginErrorDialog> getLoginErrorDialogProvider;

  private Provider<ChangePasswordView> getChangePasswordViewProvider;

  private DaggerChangePasswordComponent(ChangePasswordModule changePasswordModuleParam,
      AppComponent appComponentParam) {
    this.changePasswordModule = changePasswordModuleParam;
    this.appComponent = appComponentParam;
    initialize(changePasswordModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private ChangePasswordModel changePasswordModel() {
    return ChangePasswordModule_GetChangePasswordModelFactory.getChangePasswordModel(changePasswordModule, Preconditions.checkNotNullFromComponent(appComponent.webservice()));
  }

  private ChangePasswordPresenter changePasswordPresenter() {
    return ChangePasswordModule_GetChangePasswordPresenterFactory.getChangePasswordPresenter(changePasswordModule, changePasswordModel(), getChangePasswordViewProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ChangePasswordModule changePasswordModuleParam,
      final AppComponent appComponentParam) {
    this.getErrorMessageProvider = ChangePasswordModule_GetErrorMessageFactory.create(changePasswordModuleParam);
    this.getLoginErrorDialogProvider = ChangePasswordModule_GetLoginErrorDialogFactory.create(changePasswordModuleParam, getErrorMessageProvider);
    this.getChangePasswordViewProvider = DoubleCheck.provider(ChangePasswordModule_GetChangePasswordViewFactory.create(changePasswordModuleParam, getLoginErrorDialogProvider));
  }

  @Override
  public void inject(ChangePasswordActivity changePasswordActivity) {
    injectChangePasswordActivity(changePasswordActivity);
  }

  private ChangePasswordActivity injectChangePasswordActivity(ChangePasswordActivity instance) {
    ChangePasswordActivity_MembersInjector.injectChangePasswordView(instance, getChangePasswordViewProvider.get());
    ChangePasswordActivity_MembersInjector.injectChangePasswordPresenter(instance, changePasswordPresenter());
    return instance;
  }

  public static final class Builder {
    private ChangePasswordModule changePasswordModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder changePasswordModule(ChangePasswordModule changePasswordModule) {
      this.changePasswordModule = Preconditions.checkNotNull(changePasswordModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public ChangePasswordComponent build() {
      Preconditions.checkBuilderRequirement(changePasswordModule, ChangePasswordModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerChangePasswordComponent(changePasswordModule, appComponent);
    }
  }
}
