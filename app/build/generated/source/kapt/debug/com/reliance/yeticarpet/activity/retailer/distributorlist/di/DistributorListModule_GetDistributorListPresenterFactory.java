// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.activity.retailer.distributorlist.di;

import com.reliance.yeticarpet.activity.retailer.distributorlist.mvp.DistributorListModel;
import com.reliance.yeticarpet.activity.retailer.distributorlist.mvp.DistributorListPresenter;
import com.reliance.yeticarpet.activity.retailer.distributorlist.mvp.DistributorListView;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DistributorListModule_GetDistributorListPresenterFactory implements Factory<DistributorListPresenter> {
  private final DistributorListModule module;

  private final Provider<DistributorListModel> distributorListModelProvider;

  private final Provider<DistributorListView> distributorListViewProvider;

  public DistributorListModule_GetDistributorListPresenterFactory(DistributorListModule module,
      Provider<DistributorListModel> distributorListModelProvider,
      Provider<DistributorListView> distributorListViewProvider) {
    this.module = module;
    this.distributorListModelProvider = distributorListModelProvider;
    this.distributorListViewProvider = distributorListViewProvider;
  }

  @Override
  public DistributorListPresenter get() {
    return getDistributorListPresenter(module, distributorListModelProvider.get(), distributorListViewProvider.get());
  }

  public static DistributorListModule_GetDistributorListPresenterFactory create(
      DistributorListModule module, Provider<DistributorListModel> distributorListModelProvider,
      Provider<DistributorListView> distributorListViewProvider) {
    return new DistributorListModule_GetDistributorListPresenterFactory(module, distributorListModelProvider, distributorListViewProvider);
  }

  public static DistributorListPresenter getDistributorListPresenter(DistributorListModule instance,
      DistributorListModel distributorListModel, DistributorListView distributorListView) {
    return Preconditions.checkNotNullFromProvides(instance.getDistributorListPresenter(distributorListModel, distributorListView));
  }
}
