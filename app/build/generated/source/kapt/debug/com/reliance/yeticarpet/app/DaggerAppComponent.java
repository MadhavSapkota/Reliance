// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.app;

import android.content.Context;
import com.reliance.yeticarpet.databasemanager.ApplicationDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import okhttp3.Cache;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final AppModule appModule;

  private final NetworkModule networkModule;

  private final DatabaseModule databaseModule;

  private DaggerAppComponent(AppModule appModuleParam, NetworkModule networkModuleParam,
      DatabaseModule databaseModuleParam) {
    this.appModule = appModuleParam;
    this.networkModule = networkModuleParam;
    this.databaseModule = databaseModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private Cache cache() {
    return NetworkModule_CacheFactory.cache(networkModule, AppModule_ContextFactory.context(appModule));
  }

  private OkHttpClient okHttpClient() {
    return NetworkModule_OkHttpClientFactory.okHttpClient(networkModule, NetworkModule_HttpLoggingInterceptorFactory.httpLoggingInterceptor(networkModule), cache());
  }

  private Retrofit retrofit() {
    return NetworkModule_RetrofitFactory.retrofit(networkModule, okHttpClient());
  }

  @Override
  public Context context() {
    return AppModule_ContextFactory.context(appModule);
  }

  @Override
  public Webservice webservice() {
    return NetworkModule_WebserviceFactory.webservice(networkModule, retrofit());
  }

  @Override
  public ApplicationDatabase database() {
    return DatabaseModule_ProvideDatabaseFactory.provideDatabase(databaseModule, AppModule_ContextFactory.context(appModule));
  }

  public static final class Builder {
    private AppModule appModule;

    private NetworkModule networkModule;

    private DatabaseModule databaseModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder databaseModule(DatabaseModule databaseModule) {
      this.databaseModule = Preconditions.checkNotNull(databaseModule);
      return this;
    }

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (databaseModule == null) {
        this.databaseModule = new DatabaseModule();
      }
      return new DaggerAppComponent(appModule, networkModule, databaseModule);
    }
  }
}
