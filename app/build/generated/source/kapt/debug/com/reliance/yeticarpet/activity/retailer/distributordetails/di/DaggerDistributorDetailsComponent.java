// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.activity.retailer.distributordetails.di;

import com.reliance.yeticarpet.activity.retailer.distributordetails.DistributorDetailsActivity;
import com.reliance.yeticarpet.activity.retailer.distributordetails.DistributorDetailsActivity_MembersInjector;
import com.reliance.yeticarpet.activity.retailer.distributordetails.mvp.DistributorDetailsModel;
import com.reliance.yeticarpet.activity.retailer.distributordetails.mvp.DistributorDetailsPresenter;
import com.reliance.yeticarpet.activity.retailer.distributordetails.mvp.DistributorDetailsView;
import com.reliance.yeticarpet.app.AppComponent;
import com.reliance.yeticarpet.dialog.CredentialsErrorDialog;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerDistributorDetailsComponent implements DistributorDetailsComponent {
  private final DistributorDetailsModule distributorDetailsModule;

  private final AppComponent appComponent;

  private Provider<String> getErrorMessageProvider;

  private Provider<CredentialsErrorDialog> getCredentialsErrorDialogProvider;

  private Provider<DistributorDetailsView> getMonthlyTrackerViewProvider;

  private DaggerDistributorDetailsComponent(DistributorDetailsModule distributorDetailsModuleParam,
      AppComponent appComponentParam) {
    this.distributorDetailsModule = distributorDetailsModuleParam;
    this.appComponent = appComponentParam;
    initialize(distributorDetailsModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private DistributorDetailsModel distributorDetailsModel() {
    return DistributorDetailsModule_GetMonthlyTrackerModelFactory.getMonthlyTrackerModel(distributorDetailsModule, Preconditions.checkNotNullFromComponent(appComponent.webservice()));
  }

  private DistributorDetailsPresenter distributorDetailsPresenter() {
    return DistributorDetailsModule_GetDistributorListPresenterFactory.getDistributorListPresenter(distributorDetailsModule, distributorDetailsModel(), getMonthlyTrackerViewProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final DistributorDetailsModule distributorDetailsModuleParam,
      final AppComponent appComponentParam) {
    this.getErrorMessageProvider = DistributorDetailsModule_GetErrorMessageFactory.create(distributorDetailsModuleParam);
    this.getCredentialsErrorDialogProvider = DistributorDetailsModule_GetCredentialsErrorDialogFactory.create(distributorDetailsModuleParam, getErrorMessageProvider);
    this.getMonthlyTrackerViewProvider = DoubleCheck.provider(DistributorDetailsModule_GetMonthlyTrackerViewFactory.create(distributorDetailsModuleParam, getCredentialsErrorDialogProvider));
  }

  @Override
  public void inject(DistributorDetailsActivity distributorDetailsActivity) {
    injectDistributorDetailsActivity(distributorDetailsActivity);
  }

  private DistributorDetailsActivity injectDistributorDetailsActivity(
      DistributorDetailsActivity instance) {
    DistributorDetailsActivity_MembersInjector.injectDistributorDetailsView(instance, getMonthlyTrackerViewProvider.get());
    DistributorDetailsActivity_MembersInjector.injectDistributorDetailsPresenter(instance, distributorDetailsPresenter());
    return instance;
  }

  public static final class Builder {
    private DistributorDetailsModule distributorDetailsModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder distributorDetailsModule(DistributorDetailsModule distributorDetailsModule) {
      this.distributorDetailsModule = Preconditions.checkNotNull(distributorDetailsModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public DistributorDetailsComponent build() {
      Preconditions.checkBuilderRequirement(distributorDetailsModule, DistributorDetailsModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerDistributorDetailsComponent(distributorDetailsModule, appComponent);
    }
  }
}
