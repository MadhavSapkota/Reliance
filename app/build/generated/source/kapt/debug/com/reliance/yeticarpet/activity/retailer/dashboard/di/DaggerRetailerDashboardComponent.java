// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.activity.retailer.dashboard.di;

import com.reliance.yeticarpet.activity.retailer.dashboard.RetailerDashboardActivity;
import com.reliance.yeticarpet.activity.retailer.dashboard.RetailerDashboardActivity_MembersInjector;
import com.reliance.yeticarpet.activity.retailer.dashboard.mvp.RetailerDashboardModel;
import com.reliance.yeticarpet.activity.retailer.dashboard.mvp.RetailerDashboardPresenter;
import com.reliance.yeticarpet.activity.retailer.dashboard.mvp.RetailerDashboardView;
import com.reliance.yeticarpet.app.AppComponent;
import com.reliance.yeticarpet.dialog.FiscalYearDialog;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerRetailerDashboardComponent implements RetailerDashboardComponent {
  private final RetailerDashboardModule retailerDashboardModule;

  private final AppComponent appComponent;

  private Provider<FiscalYearDialog> getFiscalYearDialogProvider;

  private Provider<RetailerDashboardView> getRetailerDashboardViewProvider;

  private DaggerRetailerDashboardComponent(RetailerDashboardModule retailerDashboardModuleParam,
      AppComponent appComponentParam) {
    this.retailerDashboardModule = retailerDashboardModuleParam;
    this.appComponent = appComponentParam;
    initialize(retailerDashboardModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private RetailerDashboardModel retailerDashboardModel() {
    return RetailerDashboardModule_GetRetailerDashboardModelFactory.getRetailerDashboardModel(retailerDashboardModule, Preconditions.checkNotNullFromComponent(appComponent.webservice()));
  }

  private RetailerDashboardPresenter retailerDashboardPresenter() {
    return RetailerDashboardModule_GetRetailerDashboardPresenterFactory.getRetailerDashboardPresenter(retailerDashboardModule, getRetailerDashboardViewProvider.get(), retailerDashboardModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final RetailerDashboardModule retailerDashboardModuleParam,
      final AppComponent appComponentParam) {
    this.getFiscalYearDialogProvider = RetailerDashboardModule_GetFiscalYearDialogFactory.create(retailerDashboardModuleParam);
    this.getRetailerDashboardViewProvider = DoubleCheck.provider(RetailerDashboardModule_GetRetailerDashboardViewFactory.create(retailerDashboardModuleParam, getFiscalYearDialogProvider));
  }

  @Override
  public void inject(RetailerDashboardActivity retailerDashboardActivity) {
    injectRetailerDashboardActivity(retailerDashboardActivity);
  }

  private RetailerDashboardActivity injectRetailerDashboardActivity(
      RetailerDashboardActivity instance) {
    RetailerDashboardActivity_MembersInjector.injectDashboardView(instance, getRetailerDashboardViewProvider.get());
    RetailerDashboardActivity_MembersInjector.injectDashboardPresenter(instance, retailerDashboardPresenter());
    return instance;
  }

  public static final class Builder {
    private RetailerDashboardModule retailerDashboardModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder retailerDashboardModule(RetailerDashboardModule retailerDashboardModule) {
      this.retailerDashboardModule = Preconditions.checkNotNull(retailerDashboardModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public RetailerDashboardComponent build() {
      Preconditions.checkBuilderRequirement(retailerDashboardModule, RetailerDashboardModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerRetailerDashboardComponent(retailerDashboardModule, appComponent);
    }
  }
}
