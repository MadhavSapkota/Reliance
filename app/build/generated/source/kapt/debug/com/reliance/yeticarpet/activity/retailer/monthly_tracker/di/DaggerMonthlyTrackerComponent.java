// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.activity.retailer.monthly_tracker.di;

import com.reliance.yeticarpet.activity.retailer.monthly_tracker.MonthlyTrackerActivity;
import com.reliance.yeticarpet.activity.retailer.monthly_tracker.MonthlyTrackerActivity_MembersInjector;
import com.reliance.yeticarpet.activity.retailer.monthly_tracker.adapter.PercentageAdapter;
import com.reliance.yeticarpet.activity.retailer.monthly_tracker.adapter.TrackerAdapter;
import com.reliance.yeticarpet.activity.retailer.monthly_tracker.mvp.MonthlyTrackerModel;
import com.reliance.yeticarpet.activity.retailer.monthly_tracker.mvp.MonthlyTrackerPresenter;
import com.reliance.yeticarpet.activity.retailer.monthly_tracker.mvp.MonthlyTrackerView;
import com.reliance.yeticarpet.app.AppComponent;
import com.reliance.yeticarpet.dialog.CredentialsErrorDialog;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMonthlyTrackerComponent implements MonthlyTrackerComponent {
  private final MonthlyTrackerModule monthlyTrackerModule;

  private final AppComponent appComponent;

  private Provider<String> getErrorMessageProvider;

  private Provider<CredentialsErrorDialog> getCredentialsErrorDialogProvider;

  private Provider<TrackerAdapter> getRetailerDashboardAdapterProvider;

  private Provider<PercentageAdapter> getPercentageAdapterProvider;

  private Provider<MonthlyTrackerView> getMonthlyTrackerViewProvider;

  private DaggerMonthlyTrackerComponent(MonthlyTrackerModule monthlyTrackerModuleParam,
      AppComponent appComponentParam) {
    this.monthlyTrackerModule = monthlyTrackerModuleParam;
    this.appComponent = appComponentParam;
    initialize(monthlyTrackerModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private MonthlyTrackerModel monthlyTrackerModel() {
    return MonthlyTrackerModule_GetMonthlyTrackerModelFactory.getMonthlyTrackerModel(monthlyTrackerModule, Preconditions.checkNotNullFromComponent(appComponent.webservice()));
  }

  private MonthlyTrackerPresenter monthlyTrackerPresenter() {
    return MonthlyTrackerModule_GetMonthlyTrackerPresenterFactory.getMonthlyTrackerPresenter(monthlyTrackerModule, monthlyTrackerModel(), getMonthlyTrackerViewProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final MonthlyTrackerModule monthlyTrackerModuleParam,
      final AppComponent appComponentParam) {
    this.getErrorMessageProvider = MonthlyTrackerModule_GetErrorMessageFactory.create(monthlyTrackerModuleParam);
    this.getCredentialsErrorDialogProvider = MonthlyTrackerModule_GetCredentialsErrorDialogFactory.create(monthlyTrackerModuleParam, getErrorMessageProvider);
    this.getRetailerDashboardAdapterProvider = MonthlyTrackerModule_GetRetailerDashboardAdapterFactory.create(monthlyTrackerModuleParam);
    this.getPercentageAdapterProvider = MonthlyTrackerModule_GetPercentageAdapterFactory.create(monthlyTrackerModuleParam);
    this.getMonthlyTrackerViewProvider = DoubleCheck.provider(MonthlyTrackerModule_GetMonthlyTrackerViewFactory.create(monthlyTrackerModuleParam, getCredentialsErrorDialogProvider, getRetailerDashboardAdapterProvider, getPercentageAdapterProvider));
  }

  @Override
  public void inject(MonthlyTrackerActivity monthlyTrackerActivity) {
    injectMonthlyTrackerActivity(monthlyTrackerActivity);
  }

  private MonthlyTrackerActivity injectMonthlyTrackerActivity(MonthlyTrackerActivity instance) {
    MonthlyTrackerActivity_MembersInjector.injectMonthlyTrackerView(instance, getMonthlyTrackerViewProvider.get());
    MonthlyTrackerActivity_MembersInjector.injectMonthlyTrackerPresenter(instance, monthlyTrackerPresenter());
    return instance;
  }

  public static final class Builder {
    private MonthlyTrackerModule monthlyTrackerModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder monthlyTrackerModule(MonthlyTrackerModule monthlyTrackerModule) {
      this.monthlyTrackerModule = Preconditions.checkNotNull(monthlyTrackerModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public MonthlyTrackerComponent build() {
      Preconditions.checkBuilderRequirement(monthlyTrackerModule, MonthlyTrackerModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerMonthlyTrackerComponent(monthlyTrackerModule, appComponent);
    }
  }
}
