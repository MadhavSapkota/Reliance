// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.activity.login.di;

import com.reliance.yeticarpet.activity.login.LoginActivity;
import com.reliance.yeticarpet.activity.login.LoginActivity_MembersInjector;
import com.reliance.yeticarpet.activity.login.mvp.LoginModel;
import com.reliance.yeticarpet.activity.login.mvp.LoginPresenter;
import com.reliance.yeticarpet.activity.login.mvp.LoginView;
import com.reliance.yeticarpet.app.AppComponent;
import com.reliance.yeticarpet.dialog.LoginErrorDialog;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerLoginComponent implements LoginComponent {
  private final LoginModule loginModule;

  private final AppComponent appComponent;

  private Provider<String> getErrorMessageProvider;

  private Provider<LoginErrorDialog> getLoginErrorDialogProvider;

  private Provider<LoginView> getLoginViewProvider;

  private DaggerLoginComponent(LoginModule loginModuleParam, AppComponent appComponentParam) {
    this.loginModule = loginModuleParam;
    this.appComponent = appComponentParam;
    initialize(loginModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private LoginModel loginModel() {
    return LoginModule_GetLoginModelFactory.getLoginModel(loginModule, Preconditions.checkNotNullFromComponent(appComponent.webservice()));
  }

  private LoginPresenter loginPresenter() {
    return LoginModule_GetLoginPresenterFactory.getLoginPresenter(loginModule, loginModel(), getLoginViewProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final LoginModule loginModuleParam,
      final AppComponent appComponentParam) {
    this.getErrorMessageProvider = LoginModule_GetErrorMessageFactory.create(loginModuleParam);
    this.getLoginErrorDialogProvider = LoginModule_GetLoginErrorDialogFactory.create(loginModuleParam, getErrorMessageProvider);
    this.getLoginViewProvider = DoubleCheck.provider(LoginModule_GetLoginViewFactory.create(loginModuleParam, getLoginErrorDialogProvider));
  }

  @Override
  public void inject(LoginActivity loginActivity) {
    injectLoginActivity(loginActivity);
  }

  private LoginActivity injectLoginActivity(LoginActivity instance) {
    LoginActivity_MembersInjector.injectLoginView(instance, getLoginViewProvider.get());
    LoginActivity_MembersInjector.injectLoginPresenter(instance, loginPresenter());
    return instance;
  }

  public static final class Builder {
    private LoginModule loginModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder loginModule(LoginModule loginModule) {
      this.loginModule = Preconditions.checkNotNull(loginModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public LoginComponent build() {
      Preconditions.checkBuilderRequirement(loginModule, LoginModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerLoginComponent(loginModule, appComponent);
    }
  }
}
