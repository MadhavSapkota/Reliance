// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.activity.otp.di;

import com.reliance.yeticarpet.activity.otp.OtpActivity;
import com.reliance.yeticarpet.activity.otp.OtpActivity_MembersInjector;
import com.reliance.yeticarpet.activity.otp.mvp.OtpModel;
import com.reliance.yeticarpet.activity.otp.mvp.OtpPresenter;
import com.reliance.yeticarpet.activity.otp.mvp.OtpView;
import com.reliance.yeticarpet.app.AppComponent;
import com.reliance.yeticarpet.dialog.LoginErrorDialog;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerOtpComponent implements OtpComponent {
  private final OtpModule otpModule;

  private final AppComponent appComponent;

  private Provider<String> getErrorMessageProvider;

  private Provider<LoginErrorDialog> getLoginErrorDialogProvider;

  private Provider<OtpView> getOtpViewProvider;

  private DaggerOtpComponent(OtpModule otpModuleParam, AppComponent appComponentParam) {
    this.otpModule = otpModuleParam;
    this.appComponent = appComponentParam;
    initialize(otpModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private OtpModel otpModel() {
    return OtpModule_GetOtpModelFactory.getOtpModel(otpModule, Preconditions.checkNotNullFromComponent(appComponent.webservice()));
  }

  private OtpPresenter otpPresenter() {
    return OtpModule_GetOtpPresenterFactory.getOtpPresenter(otpModule, otpModel(), getOtpViewProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final OtpModule otpModuleParam, final AppComponent appComponentParam) {
    this.getErrorMessageProvider = OtpModule_GetErrorMessageFactory.create(otpModuleParam);
    this.getLoginErrorDialogProvider = OtpModule_GetLoginErrorDialogFactory.create(otpModuleParam, getErrorMessageProvider);
    this.getOtpViewProvider = DoubleCheck.provider(OtpModule_GetOtpViewFactory.create(otpModuleParam, getLoginErrorDialogProvider));
  }

  @Override
  public void inject(OtpActivity otpActivity) {
    injectOtpActivity(otpActivity);
  }

  private OtpActivity injectOtpActivity(OtpActivity instance) {
    OtpActivity_MembersInjector.injectOtpView(instance, getOtpViewProvider.get());
    OtpActivity_MembersInjector.injectOtpPresenter(instance, otpPresenter());
    return instance;
  }

  public static final class Builder {
    private OtpModule otpModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder otpModule(OtpModule otpModule) {
      this.otpModule = Preconditions.checkNotNull(otpModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public OtpComponent build() {
      Preconditions.checkBuilderRequirement(otpModule, OtpModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerOtpComponent(otpModule, appComponent);
    }
  }
}
