// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.app;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_OkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider;

  private final Provider<Cache> cacheProvider;

  public NetworkModule_OkHttpClientFactory(NetworkModule module,
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider,
      Provider<Cache> cacheProvider) {
    this.module = module;
    this.httpLoggingInterceptorProvider = httpLoggingInterceptorProvider;
    this.cacheProvider = cacheProvider;
  }

  @Override
  public OkHttpClient get() {
    return okHttpClient(module, httpLoggingInterceptorProvider.get(), cacheProvider.get());
  }

  public static NetworkModule_OkHttpClientFactory create(NetworkModule module,
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider,
      Provider<Cache> cacheProvider) {
    return new NetworkModule_OkHttpClientFactory(module, httpLoggingInterceptorProvider, cacheProvider);
  }

  public static OkHttpClient okHttpClient(NetworkModule instance,
      HttpLoggingInterceptor httpLoggingInterceptor, Cache cache) {
    return Preconditions.checkNotNullFromProvides(instance.okHttpClient(httpLoggingInterceptor, cache));
  }
}
