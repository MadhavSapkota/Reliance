// Generated by Dagger (https://dagger.dev).
package com.reliance.yeticarpet.activity.distributor.retailerlist.di;

import com.reliance.yeticarpet.activity.distributor.retailerlist.PartyListActivity;
import com.reliance.yeticarpet.activity.distributor.retailerlist.PartyListActivity_MembersInjector;
import com.reliance.yeticarpet.activity.distributor.retailerlist.adapter.PartyListAdapter;
import com.reliance.yeticarpet.activity.distributor.retailerlist.mvp.PartyListModel;
import com.reliance.yeticarpet.activity.distributor.retailerlist.mvp.PartyListPresenter;
import com.reliance.yeticarpet.activity.distributor.retailerlist.mvp.PartyListView;
import com.reliance.yeticarpet.app.AppComponent;
import com.reliance.yeticarpet.dialog.CredentialsErrorDialog;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerPartyListComponent implements PartyListComponent {
  private final PartyListModule partyListModule;

  private final AppComponent appComponent;

  private Provider<String> getErrorMessageProvider;

  private Provider<CredentialsErrorDialog> getCredentialsErrorDialogProvider;

  private Provider<PartyListAdapter> getPartyDashboardAdapterProvider;

  private Provider<PartyListView> getPartyTrackerViewProvider;

  private DaggerPartyListComponent(PartyListModule partyListModuleParam,
      AppComponent appComponentParam) {
    this.partyListModule = partyListModuleParam;
    this.appComponent = appComponentParam;
    initialize(partyListModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private PartyListModel partyListModel() {
    return PartyListModule_GetPartyModelFactory.getPartyModel(partyListModule, Preconditions.checkNotNullFromComponent(appComponent.webservice()));
  }

  private PartyListPresenter partyListPresenter() {
    return PartyListModule_GetPartyListPresenterFactory.getPartyListPresenter(partyListModule, partyListModel(), getPartyTrackerViewProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final PartyListModule partyListModuleParam,
      final AppComponent appComponentParam) {
    this.getErrorMessageProvider = PartyListModule_GetErrorMessageFactory.create(partyListModuleParam);
    this.getCredentialsErrorDialogProvider = PartyListModule_GetCredentialsErrorDialogFactory.create(partyListModuleParam, getErrorMessageProvider);
    this.getPartyDashboardAdapterProvider = PartyListModule_GetPartyDashboardAdapterFactory.create(partyListModuleParam);
    this.getPartyTrackerViewProvider = DoubleCheck.provider(PartyListModule_GetPartyTrackerViewFactory.create(partyListModuleParam, getCredentialsErrorDialogProvider, getPartyDashboardAdapterProvider));
  }

  @Override
  public void inject(PartyListActivity partyListActivity) {
    injectPartyListActivity(partyListActivity);
  }

  private PartyListActivity injectPartyListActivity(PartyListActivity instance) {
    PartyListActivity_MembersInjector.injectDistributorListView(instance, getPartyTrackerViewProvider.get());
    PartyListActivity_MembersInjector.injectDistributorListPresenter(instance, partyListPresenter());
    return instance;
  }

  public static final class Builder {
    private PartyListModule partyListModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder partyListModule(PartyListModule partyListModule) {
      this.partyListModule = Preconditions.checkNotNull(partyListModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public PartyListComponent build() {
      Preconditions.checkBuilderRequirement(partyListModule, PartyListModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerPartyListComponent(partyListModule, appComponent);
    }
  }
}
